#include <WiFi.h>
#include <PubSubClient.h>
#include <TinyGPS++.h>

//MQTT
#define  MQTT_ID "Esp32" //identificador do esp no MQTT_BROKER
#define  MQTT_TOPICO "home/localizacao" //topico MQTT
#define MQTT_BROKER "mqtt.tago.io" //endereco do MQTT_BROKER
#define MQTT_SENHA "034ea2e8-fc3f-46b3-bdb1-031854516450"
#define MQTT_USUARIO "Master"
#define MQTT_PORTA 1883       //porta  do MQTT_BROKER

//WIFI
#define ssid "Batcaverna"   //rede wifi
#define password "72941532" //senha rede wifi

//OBJETOS
WiFiClient wificlient; //objeto da classe wifi que o MQTT_BROKER usa pra se conectar
PubSubClient MQTT(MQTT_BROKER,MQTT_PORTA,wificlient); //objeto mqtt
TinyGPSPlus gps; //objeto GPS
HardwareSerial SerialGPS(1);          

//DADOS GPS
typedef struct{   
  double latitude;
  double longitude;
}Dado;

static void smartDelay(unsigned long ms)       //delay melhor elaborado         
{
  unsigned long start = millis();
  do
  {
    while (SerialGPS.available())
      gps.encode(SerialGPS.read());
  } while (millis() - start < ms);


   if (millis() > 5000 && gps.charsProcessed() < 10)  //caso de ruim
    Serial.println(F("Erro: nenhum dado GPS recebido"));
}

//FUNCAO QUE CONECTA NO WIFI
void wifi(){   
  WiFi.mode(WIFI_STA);  //operando apenas como estacao
  WiFi.disconnect();    //se tiver em alguma rede se desconecta
  delay(100);
  WiFi.begin(ssid, password);
  Serial.printf("Conectando na rede Wifi");
  while ( WiFi.status() != WL_CONNECTED ) {
    delay (500);
    Serial.print ( "." );
  }
  Serial.printf( "\nConectado em: %s\n",ssid);
}

//FUNCAO QUE CONECTA o dipositivo no Server MQTT
void conectaMQTT(){

  while(!MQTT.connected()){ //enquanto nao conectar com o MQTT_BROKER
    Serial.printf("Conectando ao Broker... ");
    Serial.println(MQTT_BROKER);
    if(MQTT.connect(MQTT_ID, MQTT_USUARIO, MQTT_SENHA)){    //conecta um dispositivo dentro do server mqtt
      Serial.println("Conectado ao Broker com sucesso");
    }
    else{
      Serial.println("Nao foi possivel conectar com o servidor");
      Serial.printf("Erro = ");
      Serial.println(MQTT.state());
    }
  }
}

Dado localizacao(){
  Dado loc;
  loc.latitude = gps.location.lat();
  loc.longitude = gps.location.lng();
  return loc;
}

String criaJson(){
  String json;
  Dado loc;
  loc = localizacao();

  json = "[";
  json += "{";
  json += "\"variable\":\"localizacao\",\"value\":\"Slave 1\",\"location\":"; 
  json += "{";
  json += "\"lat\":";
  json += String(loc.latitude,15);
  json += ",";
  json +=  "\"lng\":";
  json += String(loc.longitude,14);
  json += "}";
  json += "}";
  json += "]";

  return json;
}

void publica(){
  String payload;
  payload = criaJson();
  //Serial.println(payload);
  MQTT.publish(MQTT_TOPICO,payload.c_str());
}

void setup(){
  Serial.begin(115200);
  SerialGPS.begin(9600, SERIAL_8N1, 12, 15);  //Instancia as portas seriais
  wifi();   
  conectaMQTT();
}

void loop() {
   MQTT.loop(); //fica em constante comunicacao com o MQTT_BROKER
   publica();
   smartDelay(2000);
}